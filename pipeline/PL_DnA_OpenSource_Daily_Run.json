{
	"name": "PL_DnA_OpenSource_Daily_Run",
	"properties": {
		"activities": [
			{
				"name": "Get_SPO_Token",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Get_Client_Secret",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "POST",
					"headers": {
						"Content-Type": "application/x-www-form-urlencoded"
					},
					"url": {
						"value": "@{concat('https://accounts.accesscontrol.windows.net/'\n,json(activity('lkp metadata of Source to Landing from SPO').output.value[0].SourceParameterJSON).pl_par_Tenant_id\n,'/tokens/OAuth/2'\n)}",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "AutoResolveIntegrationRuntime",
						"type": "IntegrationRuntimeReference"
					},
					"body": {
						"value": "@{concat('grant_type=client_credentials&client_id='\n, json(activity('lkp metadata of Source to Landing from SPO').output.value[0].SourceParameterJSON).pl_par_Client_id\n\n, '@'\n\n, json(activity('lkp metadata of Source to Landing from SPO').output.value[0].SourceParameterJSON).pl_par_Tenant_id\n\n,'&client_secret='\n\n, activity('Get_Client_Secret').output.value\n\n, '&resource=00000003-0000-0ff1-ce00-000000000000/'\n\n, json(activity('lkp metadata of Source to Landing from SPO').output.value[0].SourceParameterJSON).pl_par_Tenant_name\n\n, '.sharepoint.com@'\n\n, json(activity('lkp metadata of Source to Landing from SPO').output.value[0].SourceParameterJSON).pl_par_Tenant_id\n\n)}",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Get_Client_Secret",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "lkp metadata of Source to Landing from SPO",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "GET",
					"url": {
						"value": "@{concat(\n    concat(\n        json(activity('lkp metadata of Source to Landing from SPO').output.value[0].SourceParameterJSON).pl_par_KeyVault_URL\n    , '/secrets/'\n        )\n\t,\n    json(activity('lkp metadata of Source to Landing from SPO').output.value[0].SourceParameterJSON).pl_par_keyVault_SecretsName \n    , '?api-version=7.0'\n)}",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "AutoResolveIntegrationRuntime",
						"type": "IntegrationRuntimeReference"
					},
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Lookup_DnA_spo_Sources_array",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Get_SPO_Token",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SharePointOnlineListSource",
						"query": {
							"value": "@concat('$filter=ContentType eq ','''Document'''\n, ' and Path eq '\n,'''/sites/AnalyticsandDataGovernance/Shared Documents/DA27-PanCanada Major Projects Data Automation/04 - Raw Data'''\n, ' and '\n,'Modified ge datetime'''\n,formatDateTime(addDays(utcNow()\n,json(activity('lkp metadata of Source to Landing from SPO').output.value[0].SourceParameterJSON).pl_Inspecting_Offset_Day),'yyyy-MM-dd'),\n'''')",
							"type": "Expression"
						},
						"httpRequestTimeout": "00:05:00"
					},
					"dataset": {
						"referenceName": "ds_spo_sources_array",
						"type": "DatasetReference",
						"parameters": {
							"ds_par_spoList_Name": {
								"value": "@json(activity('lkp metadata of Source to Landing from SPO').output.value[0].SourceParameterJSON).pl_par_DnA_spoList_name",
								"type": "Expression"
							},
							"ds_par_spo_site": {
								"value": "@json(activity('lkp metadata of Source to Landing from SPO').output.value[0].SourceParameterJSON).pl_par_SPO_site",
								"type": "Expression"
							},
							"ds_par_keyvaulturl": {
								"value": "@json(activity('lkp metadata of Source to Landing from SPO').output.value[0].SourceParameterJSON).pl_par_KeyVault_URL",
								"type": "Expression"
							},
							"ds_par_access_spn_secret": {
								"value": "@json(activity('lkp metadata of Source to Landing from SPO').output.value[0].SourceParameterJSON).pl_par_keyVault_SecretsName",
								"type": "Expression"
							},
							"ds_par_appID": {
								"value": "@json(activity('lkp metadata of Source to Landing from SPO').output.value[0].SourceParameterJSON).pl_par_Client_id",
								"type": "Expression"
							},
							"ds_par_tenantID": {
								"value": "@json(activity('lkp metadata of Source to Landing from SPO').output.value[0].SourceParameterJSON).pl_par_Tenant_id",
								"type": "Expression"
							},
							"ds_par_tenant_name": {
								"value": "@json(activity('lkp metadata of Source to Landing from SPO').output.value[0].SourceParameterJSON).pl_par_Tenant_name",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "lkp metadata of Source to Landing from SPO",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SharePointOnlineListSource",
						"query": {
							"value": "@concat('$filter=SystemName eq ''',pipeline().parameters.System,''' and StatusValue eq ''Active''')",
							"type": "Expression"
						},
						"httpRequestTimeout": "00:05:00"
					},
					"dataset": {
						"referenceName": "DS_SPO_ITDataGovernanceWorkgroup",
						"type": "DatasetReference",
						"parameters": {
							"List": "SourceToLanding"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "whether have files to be copied or not",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Lookup_DnA_spo_Sources_array",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@contains(activity('Lookup_DnA_spo_Sources_array').output.value[0], 'name')",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Execute pl_DnA_copy_file",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "PL_DnA_Copy_Files",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"subpl_par_items": {
										"value": "@activity('Lookup_DnA_spo_Sources_array').output.value",
										"type": "Expression"
									},
									"subpl_par_token": {
										"value": "@activity('Get_SPO_Token').output.access_token",
										"type": "Expression"
									},
									"subpl_par_SourceParameterJSON": {
										"value": "@activity('lkp metadata of Source to Landing from SPO').output.value[0].SourceParameterJson",
										"type": "Expression"
									},
									"subpl_par_dstpath": {
										"value": "@activity('lkp metadata of Source to Landing from SPO').output.value[0].LandingPath",
										"type": "Expression"
									},
									"subpl_par_SourceFileVersion": {
										"value": "@activity('lkp metadata of Source to Landing from SPO').output.value[0].SourceFileVersion",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"System": {
				"type": "string",
				"defaultValue": "Procurement_Historical"
			}
		},
		"folder": {
			"name": "DnA_OpenSource"
		},
		"annotations": []
	}
}